{
  "svelteGoogleLogin": {
    "prefix": "svelteGoogleLogin",
    "scope": "typescript",
    "body": [
      "import { json, text } from \"@sveltejs/kit\";",
      "import type { RequestHandler } from \"./\\$types\";",
      "import { OAuth2Client } from \"google-auth-library\";",
      "",
      "const CLIENT_ID =",
      "  \"218757428378-hantof5l1r5rsueif4p8ari7q4hqmgrk.apps.googleusercontent.com\";",
      "",
      "async function verify(token: string) {",
      "  const client = new OAuth2Client();",
      "  const ticket = await client.verifyIdToken({",
      "    idToken: token,",
      "    audience: CLIENT_ID,",
      "  });",
      "  const payload = ticket.getPayload() as any;",
      "  const email = payload[\"email\"];",
      "  return email;",
      "}",
      "",
      "const headers = {",
      "  \"Access-Control-Allow-Origin\": \"*\",",
      "  \"Access-Control-Allow-Methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",",
      "  \"Access-Control-Allow-Headers\": \"Content-Type,authorization\",",
      "};",
      "",
      "export const OPTIONS: RequestHandler = () => {",
      "  return new Response(\"\", {",
      "    status: 200,",
      "    headers,",
      "  });",
      "};",
      "",
      "export const POST: RequestHandler = async ({ request }) => {",
      "  const payload = await request.formData();",
      "  const token = payload.get(\"credential\") as string;",
      "",
      "  return new Promise(async (resolve) => {",
      "    verify(token)",
      "      .then((email) => {",
      "        resolve(json({ email }, { status: 200, headers }));",
      "      })",
      "      .catch((err) => {",
      "        console.log(err);",
      "        resolve(json({ error: \"Invalid token\" }, { status: 401, headers }));",
      "      });",
      "  });",
      "};",
      "",
      "export const GET: RequestHandler = ({}) => {",
      "  return text(`",
      "      <!doctype html>",
      "      <html lang=\"en\">",
      "        <head>",
      "          <meta charset=\"utf-8\" />",
      "          <script src=\"https://accounts.google.com/gsi/client\" async></script>",
      "          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
      "        </head>",
      "        <body data-sveltekit-preload-data=\"hover\">",
      "          <div id=\"g_id_onload\"",
      "               data-client_id=\"\\${CLIENT_ID}\"",
      "               data-context=\"signin\"",
      "               data-ux_mode=\"popup\"",
      "               data-login_uri=\"http://localhost:3010/test/login\"",
      "               data-auto_prompt=\"false\">",
      "          </div>",
      "",
      "          <div class=\"g_id_signin\"",
      "               data-type=\"standard\"",
      "               data-shape=\"rectangular\"",
      "               data-theme=\"outline\"",
      "               data-text=\"signin_with\"",
      "               data-size=\"large\"",
      "               data-logo_alignment=\"left\">",
      "          </div>",
      "        </body>",
      "      </html>",
      "  `);",
      "};",
      ""
    ],
    "description": "svelteGoogleLogin"
  },
  "drizzleSchema": {
    "scope": "typescript",
    "prefix": "drizzleSchema",
    "body": [
      "export const tablename = mysqlTable(",
      "  \"${1:tableName}\",",
      "  {",
      "    id: bigint(\"id\", { mode: \"number\" }).primaryKey().autoincrement(),",
      "    hari: varchar(\"hari\", { length: 100 }).default(\"\"),",
      "    jamke: varchar(\"jamke\", { length: 100 }).default(\"\"),",
      "    waktu: varchar(\"waktu\", { length: 100 }).default(\"\"),",
      "  },",
      "  (table) => {",
      "    return {",
      "      ${1:tableName}_hari_idx: index(\"${1:tableName}_hari_idx\").on(table.hari),",
      "      ${1:tableName}_jamke_idx: index(\"${1:tableName}_jamke_idx\").on(table.jamke),",
      "    };",
      "  }",
      ");",
      ""
    ],
    "description": "drizzleSchema"
  },
  "svelteAPI": {
    "scope": "typescript",
    "prefix": "svelteapi",
    "body": [
      "import { json } from \"@sveltejs/kit\";",
      "import type { RequestHandler } from \"./\\$types\";",
      "",
      "const headers = {",
      "  \"Access-Control-Allow-Origin\": \"*\",",
      "  \"Access-Control-Allow-Methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",",
      "  \"Access-Control-Allow-Headers\": \"Content-Type,authorization\",",
      "};",
      "",
      "export const OPTIONS: RequestHandler = () => {",
      "  return new Response(\"\", {",
      "    status: 200,",
      "    headers,",
      "  });",
      "};",
      "export const POST: RequestHandler = async ({ request, cookies }) => {",
      "  const { something } = await request.json();",
      "",
      "  return json({ something }, { status: 200, headers });",
      "};",
      "",
      "export const GET: RequestHandler = ({ url, params }) => {",
      "  const q = url.searchParams.get(\"q\");",
      "  // const slug = params.slug;",
      "  const number = Math.floor(Math.random() * 6) + 1;",
      "",
      "  return json({ number }, {status:200, headers});",
      "};",
      ""
    ]
  },
  "nextApiRouteTS": {
    "prefix": "nextapiroute",
    "scope": "typescript",
    "body": [
      "// path : app/somepath/route.ts",
      "",
      "import { NextRequest, NextResponse } from \"next/server\";",
      "// export const runtime = \"edge\";",
      "",
      "export const OPTIONS = async () => {",
      "  return NextResponse.json({",
      "    status: \"ok\",",
      "  });",
      "};",
      "",
      "export const GET = async (",
      "  req: NextRequest,",
      "  { params }: { params: { [s: string]: string } }",
      ") => {",
      "  try {",
      "    const url = new URL(req.url);",
      "    const {} = params ? params : {};",
      "    const searchParams = new URLSearchParams(url.search);",
      "    const test = searchParams.get(\"test\");",
      "",
      "    return NextResponse.json({ status: \"ok\" });",
      "  } catch (error) {",
      "    return NextResponse.json({ err: (error as any).toString() });",
      "  }",
      "};",
      "",
      "export const POST = async (",
      "  req: NextRequest,",
      "  { params }: { params: { [s: string]: string } }",
      ") => {",
      "  try {",
      "    const body = await req.json();",
      "    const {}: { [key: string]: string } = body;",
      "    const {} = params;",
      "",
      "    return NextResponse.json({ status: \"ok\", body });",
      "  } catch (error) {",
      "    return NextResponse.json({ err: (error as any).toString() });",
      "  }",
      "};",
      ""
    ],
    "description": ""
  },
  "nextApiPostTS": {
    "prefix": "nextapipost",
    "scope": "typescript",
    "body": [
      "// path : app/somepath/route.ts",
      "",
      "import { NextRequest, NextResponse } from \"next/server\";",
      "// export const runtime = \"edge\";",
      "",
      "export const OPTIONS = async () => {",
      "  return NextResponse.json({",
      "    status: \"ok\",",
      "  });",
      "};",
      "",
      "export const POST = async (",
      "  req: NextRequest,",
      "  { params }: { params: { [s: string]: string } }",
      ") => {",
      "  try {",
      "    const body = await req.json();",
      "    const {}: { [key: string]: string } = body;",
      "    const {} = params;",
      "",
      "    return NextResponse.json({ status: \"ok\", body });",
      "  } catch (error) {",
      "    return NextResponse.json({ err: (error as any).toString() });",
      "  }",
      "};",
      ""
    ],
    "description": ""
  },
  "sveltePageLoadTS": {
    "scope": "typescript",
    "prefix": "svelte",
    "body": [
      "import type { PageLoad } from './\\$types';",
      "",
      "export const load = (async ({ fetch, params }) => {",
      "\tconst res = await fetch(`/api/items/${params.id}`);",
      "\tconst item = await res.json();",
      "",
      "\treturn { item };",
      "}) satisfies PageLoad;"
    ]
  },
  "returnedge": {
    "scope": "typescript",
    "prefix": "returnedge",
    "body": [
      "return new NextResponse(",
      "  JSON.stringify({",
      "    hello: \"World\",",
      "  }),",
      "  {",
      "    status: 200,",
      "    headers: {",
      "      \"content-type\": \"application/json\",",
      "    },",
      "  }",
      ");"
    ]
  },
  "nextedge13": {
    "scope": "typescript",
    "prefix": "nextedge13",
    "body": [
      "import { NextRequest, NextResponse } from \"next/server\";",
      "",
      "export async function OPTIONS() {",
      "  return new NextResponse(\"ok\", {",
      "    status: 200,",
      "  });",
      "}",
      "",
      "export async function GET(req: NextResponse) {",
      "  return new NextResponse(",
      "    JSON.stringify({",
      "      hello: \"World\",",
      "    }),",
      "    {",
      "      status: 200,",
      "      headers: {",
      "        \"content-type\": \"application/json\",",
      "      },",
      "    }",
      "  );",
      "}",
      "",
      "export async function POST(req: NextRequest) {",
      "  const url = req.nextUrl;",
      "  const somequery = url.searchParams.get(\"somequery\") || \"world\";",
      "",
      "  const body = await req.json();",
      "  const somebody = body.somebody || \"body\";",
      "",
      "  // your code here",
      "",
      "  return new NextResponse(",
      "    JSON.stringify({ hello: somequery, body: somebody }),",
      "    {",
      "      status: 200,",
      "      headers: {",
      "        \"content-type\": \"application/json\",",
      "      },",
      "    }",
      "  );",
      "}"
    ]
  },
  "nextEdge": {
    "scope": "typescript",
    "prefix": "nextedge",
    "body": [
      "import { NextRequest, NextResponse } from \"next/server\";",
      "",
      "export const config = {",
      "  runtime: \"edge\",",
      "};",
      "export default async function handler(req: NextRequest) {",
      "  const url = req.nextUrl;",
      "  const somequery = url.searchParams.get(\"somequery\") || \"world\";",
      "  if (req.method === \"OPTIONS\") {",
      "    return new NextResponse(\"ok\", {",
      "      status: 200,",
      "      headers: {},",
      "    });",
      "  }",
      "",
      "  const body = await req.json();",
      "  const somebody = body.somebody || \"body\";",
      "",
      "  // your code here",
      "  ${1}",
      "",
      "",
      "  return new NextResponse(",
      "    JSON.stringify({ hello: somequery, body: somebody }),",
      "    {",
      "      status: 200,",
      "      headers: {",
      "        \"content-type\": \"application/json\",",
      "      },",
      "    }",
      "  );",
      "}"
    ]
  },
  "nextAPI": {
    "scope": "typescript",
    "prefix": "next",
    "body": [
      "import { NextApiRequest, NextApiResponse } from \"next\";",
      "export default (req: NextApiRequest, res: NextApiResponse) => {",
      "\tres.statusCode = 200;",
      "\tres.setHeader(\"Content-Type\", \"application/json\");",
      "\tres.end(JSON.stringify({",
      "\t\tmsg: \"Hello World!\"",
      "\t}));",
      "}"
    ]
  }
}
