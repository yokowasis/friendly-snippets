{
  "hashmap": {
    "prefix": "hashmap",
    "body": [
      "let mut ${1:map_name} = HashMap::new();",
      "${1:map_name}.insert(${2:key}, ${3:value});"
    ],
    "description": "Creates a new HashMap"
  },
  "tuple": {
    "prefix": "tuple",
    "body": ["let mut ${1:tuple_name} = (${2:elem1}, ${3:elem2});"],
    "description": "Creates a tuple with specified elements"
  },
  "vec": {
    "prefix": "vec",
    "body": ["let mut ${1:vec_name} = vec![${2:\"elem1\"}, ${3:\"elem2\"}];"],
    "description": "Creates a vector with specified elements"
  },
  "concat": {
    "prefix": "concat",
    "body": ["let mut {1:s} = format!(\"{}{}\", ${2:a}, ${3:b});"],
    "description": "Concatenates two strings"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:add}(${2:a: i32}) -> ${3:i32} {",
      "  return ${4:a+3}",
      "}"
    ],
    "description": "Function definition"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:i} in ${2:1..=6} {", "  ${3:statement}", "}"],
    "description": "For loop construct"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:condition} {", "  ${2:statement}", "}"],
    "description": "While loop construct"
  },
  "loop": {
    "prefix": "loop",
    "body": [
      "loop {",
      "  ${1:statement}",
      "  if ${2:condition} {",
      "    break;",
      "  }",
      "}"
    ],
    "description": "Loop construct"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "  ${2:pattern} => ${3:result},",
      "  _ => ${4:default_result}",
      "}"
    ],
    "description": "Match expression"
  },
  "pl": {
    "prefix": "pl",
    "body": ["println!(\"${1:Hello, world!}\");"],
    "description": "Prints a message to the console"
  },
  "main": {
    "prefix": "main",
    "body": ["fn main() {", "  println!(\"Hello, world!\");", "}"]
  }
}
