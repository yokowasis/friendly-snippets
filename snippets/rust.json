{
  "jwt_decode": {
    "prefix": "payload_decode",
    "body": [
      "let payload = match utils::decode_jwt::<AuthData>(",
      "    option_env!(\"JWT_SECRET\").unwrap_or(\"default_secret\"),",
      "    if let Some(jwt) = headers.get(\"Authorization\") {",
      "        jwt.to_str().unwrap_or(\"\")",
      "    } else {",
      "        \"\"",
      "    },",
      ") {",
      "    Ok(payload) => payload,",
      "    Err(e) => {",
      "        eprintln!(\"Error decoding JWT: {}\", e);",
      "        return format!(\"Error: {}\", e);",
      "    }",
      "};",
      ""
    ],
    "description": "Decodes a payload from bytes to a JSON object"
  },
  "jsoninsert": {
    "prefix": "jsoninsert",
    "body": [
      "if let Value::Object(ref mut obj) = ${1:data} {",
      "    obj.insert(String::from(\"${2:key}\"), json!(${3:value}));",
      "}"
    ],
    "description": "Inserts a new key-value pair into a JSON object"
  },
  "jsonarrayinsert": {
    "prefix": "jsonarrayinsert",
    "body": [
      "if let Some(array) = ${1:data}.as_array_mut() {",
      "    for item in array {",
      "        if let Some(obj) = item.as_object_mut() {",
      "            obj.insert(\"${2:key}\".to_string(), json!(${3:value}));",
      "        }",
      "    }",
      "}",
      ""
    ],
    "description": "Inserts a new element into a JSON array"
  },
  "jsonmap": {
    "prefix": "jsonmap",
    "body": [
      "let mut ${1:data} = if ${1:data}.is_object() {",
      "    if let Some(${1:data}) = ${1:data}.as_object_mut() {",
      "        ${1:data}",
      "    } else {",
      "        &serde_json::Map::new()",
      "    }",
      "} else {",
      "    &serde_json::Map::new()",
      "};",
      ""
    ]
  },
  "sql_update": {
    "prefix": "sql_update",
    "body": [
      "let client = state.db_pool.get().await.unwrap();",
      "let (sql, params) = match build_update(&client, &collection, &data, condition).await {",
      "    Ok((sql, params)) => (sql, params),",
      "    Err(e) => {",
      "        eprintln!(\"Error building insert: {}\", e);",
      "        return format!(\"Error: {}\", e);",
      "    }",
      "};",
      "",
      "let params: Vec<&(dyn ToSql + Sync)> = params",
      "    .iter()",
      "    .map(|b| b.as_ref() as &(dyn ToSql + Sync))",
      "    .collect();",
      "",
      "let s = client.execute(&sql, &params).await.unwrap();",
      ""
    ]
  },
  "sql_delete": {
    "prefix": "sql_delete",
    "body": [
      "let client = state.db_pool.get().await.unwrap();",
      "let (sql, params) = match build_delete(&collection, condition) {",
      "    Ok((sql, params)) => (sql, params),",
      "    Err(e) => {",
      "        eprintln!(\"Error building delete: {}\", e);",
      "        return format!(\"Error: {}\", e);",
      "    }",
      "};",
      "",
      "let params: Vec<&(dyn ToSql + Sync)> = params",
      "    .iter()",
      "    .map(|b| b.as_ref() as &(dyn ToSql + Sync))",
      "    .collect();",
      "",
      "let s = client.execute(&sql, &params).await.unwrap();",
      ""
    ]
  },
  "sql_select": {
    "prefix": "sql_select",
    "body": [
      "let client = state.db_pool.get().await.unwrap();",
      "let (sql, params) = match build_select(",
      "    &collection,",
      "    fields,",
      "    condition,",
      "    orderby,",
      "    Some(limit),",
      "    Some(offset),",
      ")",
      ".await",
      "{",
      "    Ok((sql, params)) => (sql, params),",
      "    Err(e) => {",
      "        eprintln!(\"Error building insert: {}\", e);",
      "        return format!(\"Error: {}\", e);",
      "    }",
      "};",
      "",
      "let params: Vec<&(dyn ToSql + Sync)> = params",
      "    .iter()",
      "    .map(|b| b.as_ref() as &(dyn ToSql + Sync))",
      "    .collect();",
      "",
      "let rows = client.query(&sql, &params).await.unwrap();",
      "let json_rows: Vec<Value> = rows.iter().map(|row| row_to_json(row)).collect();",
      "let json_response = json!({",
      "    \"page\" : page,",
      "    \"collection\" : collection,",
      "    \"perPage\" : per_page,",
      "    \"items\" : json_rows",
      "});",
      ""
    ]
  },
  "sql_insert": {
    "prefix": "sql_insert",
    "body": [
      "let client = state.db_pool.get().await.unwrap();",
      "let (sql, params) = match build_insert(&client, &collection, &data).await {",
      "    Ok((sql, params)) => (sql, params),",
      "    Err(e) => {",
      "        eprintln!(\"Error building insert: {}\", e);",
      "        return format!(\"Error: {}\", e);",
      "    }",
      "};",
      "",
      "let params: Vec<&(dyn ToSql + Sync)> = params",
      "    .iter()",
      "    .map(|b| b.as_ref() as &(dyn ToSql + Sync))",
      "    .collect();",
      "",
      "let s = client.execute(&sql, &params).await.unwrap();",
      ""
    ],
    "description": "SQL query with parameters"
  },
  "axum_get": {
    "prefix": "axum_get",
    "body": [
      "async fn root(",
      "    State(state): State<AppState>,",
      "    Path(collection): Path<String>,",
      "    Query(params): Query<HashMap<String, String>>,",
      "    headers: header::HeaderMap,",
      ") -> String {",
      "    String::from(\"Welcome to BimaSoft API\")",
      "}",
      ""
    ]
  },
  "axum_post": {
    "prefix": "axum_post",
    "body": [
      "async fn root(",
      "    State(state): State<AppState>,",
      "    Path(collection): Path<String>,",
      "    Query(params): Query<HashMap<String, String>>,",
      "    headers: header::HeaderMap,",
      "    Json(mut data): Json<Value>,",
      ") -> String {",
      "    String::from(\"Welcome to BimaSoft API\")",
      "}",
      ""
    ]
  },
  "get_env": {
    "prefix": "get_env",
    "body": ["std::env::var(\"${1:ENV_NAME}\").unwrap_or_default();"]
  },
  "get_params": {
    "prefix": "get_params",
    "body": [
      "let ${1:some_param} = params.get(\"${1:some_param}\").map(|s| s.as_str()).unwrap_or(\"\");"
    ],
    "description": "Retrieves query parameters from the request"
  },
  "get_header": {
    "prefix": "get_header",
    "body": [
      "if let Some(jwt) = headers.get(\"Authorization\") {",
      "    jwt_str = jwt.to_str().unwrap_or(\"\");",
      "}"
    ],
    "description": "Retrieves a header from the request"
  },
  "typeof": {
    "prefix": "typeof",
    "body": ["std::any::type_name_of_val(&${1:var_name})"],
    "description": "Prints the type of a variable"
  },
  "tostr": {
    "prefix": "tostr",
    "body": ["${1:var_name}.to_string()"],
    "description": "Converts a string to a String type"
  },
  "parseint": {
    "prefix": "parseint",
    "body": ["${1:string_var}.parse::<i32>().unwrap_or(0)"],
    "description": "Parses a string into an integer"
  },
  "split": {
    "prefix": "split",
    "body": ["${1:string}.split(\"${2:;}\").collect::<Vec<&str>>();"],
    "description": "Splits a string into parts based on a delimiter"
  },
  "spawn": {
    "prefix": "spawn",
    "body": [
      "tokio::spawn(async {",
      "  ${1:some_function()}.await.unwrap()",
      "});"
    ],
    "description": "Spawns an asynchronous task"
  },
  "promises": {
    "prefix": "promises",
    "body": [
      "let mut promises: Vec<JoinHandle<()>> = vec![];",
      "",
      "promises.push(tokio::spawn(async {",
      "  ${1:some_function()}.await.unwrap()",
      "}));",
      "",
      "let _results = futures::future::join_all(promises).await;"
    ],
    "description": "Example of using promises in Rust"
  },
  "encode_url_params": {
    "prefix": "encode_url_params",
    "body": [
      "let base = \"${1:url}\";",
      "let mut url = Url::parse(base).unwrap();",
      "url.query_pairs_mut()",
      "    .append_pair(\"lang\", \"en-US\");"
    ],
    "description": "Encodes a JSON object"
  },
  "fetch": {
    "prefix": "fetch",
    "body": [
      "let client = reqwest::Client::new();",
      "let res = client",
      "    .post(\"https://api.example.com/data\")",
      "    .json(&json!({",
      "        \"key\": \"value\"",
      "    }))",
      "    .send()",
      "    .await?;",
      "",
      "let body = res.text().await?;",
      "println!(\"{}\", body);",
      "Ok(())"
    ]
  },
  "now_naive": {
    "prefix": "now_naive",
    "body": ["Local::now().format(\"%Y-%m-%dT%H:%M:%S\").to_string();"],
    "description": "Get current time in seconds and nanoseconds since the epoch"
  },
  "now_utc": {
    "prefix": "now_utc",
    "body": ["Local::now().format(\"%Y-%m-%d %H:%M:%S+00:00\").to_string();"],
    "description": "Get current time in seconds and nanoseconds since the epoch"
  },
  "now_string": {
    "prefix": "now_string",
    "body": ["Local::now().format(\"%Y-%m-%d %H:%M:%S\").to_string();"],
    "description": "Get current time in seconds and nanoseconds since the epoch"
  },
  "class": {
    "prefix": "class",
    "body": [
      "pub struct ${1:ClassName} {",
      "    username: String,",
      "    age: u32,",
      "}",
      "",
      "impl ${1:ClassName} {",
      "    pub fn new(username: String, age: u32) -> Self {",
      "        Self { username, age }",
      "    }",
      "",
      "    pub fn greet(&self) {",
      "        println!(\"Hello, my name is {}!\", self.username);",
      "    }",
      "",
      "    pub fn have_birthday(&mut self) {",
      "        self.age += 1;",
      "        println!(\"Happy birthday! I'm now {} years old.\", self.age);",
      "    }",
      "}"
    ]
  },
  "axum": {
    "prefix": "axum",
    "body": [
      "use crate::{",
      "    bimasoft::{database::world, utils::hello},",
      "    types::AppState,",
      "};",
      "mod bimasoft;",
      "mod types;",
      "use axum::{",
      "    Json, Router,",
      "    extract::{Path, Query, State},",
      "    http::StatusCode,",
      "    routing::{get, post},",
      "};",
      "use axum_server::tls_rustls::RustlsConfig;",
      "use core::net;",
      "use dashmap::DashMap;",
      "use reqwest::{Method, header};",
      "use serde::{Deserialize, Serialize};",
      "use serde_json::{Value, json, value};",
      "use std::{collections::HashMap, sync::Arc};",
      "use tower_http::cors::CorsLayer;",
      "",
      "#[tokio::main]",
      "async fn main() {",
      "    let cert_path = std::env::var(\"CERT_PATH\")",
      "        .unwrap_or_default()",
      "        .trim_matches('=')",
      "        .to_string();",
      "    let key_path = std::env::var(\"KEY_PATH\")",
      "        .unwrap_or_default()",
      "        .trim_matches('=')",
      "        .to_string();",
      "    let cert_exists = std::path::Path::new(&cert_path).exists();",
      "    let key_exists = std::path::Path::new(&key_path).exists();",
      "",
      "    let use_https = !cert_path.is_empty() && !key_path.is_empty() && cert_exists && key_exists;",
      "",
      "    let mut db_cfg = deadpool_postgres::Config::new();",
      "",
      "    let dbname = std::env::var(\"DB_NAME\").unwrap_or_else(|_| \"postgres\".to_string());",
      "    let user = std::env::var(\"DB_USER\").unwrap_or_else(|_| \"postgres\".to_string());",
      "    let password = std::env::var(\"DB_PASSWORD\").unwrap_or_else(|_| \"postgres\".to_string());",
      "    let host = std::env::var(\"DB_HOST\").unwrap_or_else(|_| \"postgres\".to_string());",
      "    let port = std::env::var(\"DB_PORT\")",
      "        .unwrap_or_else(|_| \"5432\".to_string())",
      "        .parse::<u16>()",
      "        .unwrap_or(5432);",
      "",
      "    db_cfg.dbname = Some(dbname);",
      "    db_cfg.user = Some(user);",
      "    db_cfg.password = Some(password);",
      "    db_cfg.host = Some(host);",
      "    db_cfg.port = Some(port);",
      "",
      "    db_cfg.pool = Some(deadpool::managed::PoolConfig {",
      "        max_size: 10,",
      "        queue_mode: deadpool::managed::QueueMode::Fifo,",
      "        timeouts: deadpool::managed::Timeouts {",
      "            wait: Some(core::time::Duration::from_secs(3)),",
      "            create: Some(core::time::Duration::from_secs(5)),",
      "            recycle: Some(core::time::Duration::from_secs(30)),",
      "        },",
      "    });",
      "",
      "    let db_pool = db_cfg",
      "        .create_pool(",
      "            Some(deadpool_postgres::Runtime::Tokio1),",
      "            tokio_postgres::NoTls,",
      "        )",
      "        .unwrap();",
      "",
      "    // check if the database is connected",
      "    match db_pool.get().await {",
      "        Ok(_) => println!(\"Berhasil terkoneksi ke database.\"),",
      "        Err(e) => {",
      "            eprintln!(\"Failed to connect to the database : {}\", e);",
      "            return;",
      "        }",
      "    }",
      "",
      "    let redis_host = std::env::var(\"REDIS_HOST\").unwrap_or(\"redis\".to_string());",
      "    let redis_port = std::env::var(\"REDIS_PORT\")",
      "        .unwrap_or(\"6379\".to_string())",
      "        .parse::<u16>()",
      "        .unwrap_or(6379);",
      "",
      "    let redis_cfg =",
      "        deadpool_redis::Config::from_url(format!(\"redis://{}:{}/\", redis_host, redis_port));",
      "    let redis_pool = redis_cfg",
      "        .create_pool(Some(deadpool_redis::Runtime::Tokio1))",
      "        .expect(\"Failed to create Redis pool\");",
      "",
      "    // let _: () = dragonfly.set(\"hello\", \"world\").unwrap();",
      "    // let value: String = dragonfly.get(\"helloa\").unwrap_or_default();",
      "",
      "    // println!(\"Redis Connection Test: {}\", value);",
      "",
      "    // Create a broadcaster channel for real-time updates",
      "    let topics = Arc::new(DashMap::new());",
      "",
      "    let app_state = AppState {",
      "        db_pool: db_pool,",
      "        redis_pool,",
      "        topics,",
      "    };",
      "",
      "    // CORS config: allow any origin, any method, any header",
      "    let cors = CorsLayer::new()",
      "        .allow_origin(tower_http::cors::Any)",
      "        .allow_methods([",
      "            Method::GET,",
      "            Method::POST,",
      "            Method::PUT,",
      "            Method::DELETE,",
      "            Method::PATCH,",
      "        ])",
      "        .allow_headers(tower_http::cors::Any);",
      "",
      "    tracing_subscriber::fmt::init();",
      "    let app = Router::new()",
      "        .route(\"/\", get(root))",
      "        .route(\"/user/{name}\", post(test))",
      "        .layer(cors)",
      "        .with_state(app_state);",
      "",
      "    let port = std::env::var(\"PORT\")",
      "        .unwrap_or(\"3000\".to_string())",
      "        .parse::<u16>()",
      "        .unwrap_or(3000);",
      "",
      "    let addr = net::SocketAddr::from(([0, 0, 0, 0], port));",
      "",
      "    if !use_https {",
      "        println!(\"No Cert Found. Starting Normal HTTP Server\");",
      "        println!(\"cert_path {}\", cert_path);",
      "        println!(\"key_path {}\", key_path);",
      "        match axum_server::bind(addr).serve(app.into_make_service()).await {",
      "            Ok(e) => e,",
      "            _ => {",
      "                eprintln!(\"Failed to start the server\");",
      "                return;",
      "            }",
      "        };",
      "        return;",
      "    } else {",
      "        println!(\"Cert Found. Starting HTTPS Server\");",
      "        let config = RustlsConfig::from_pem_file(",
      "            std::path::Path::new(cert_path.as_str()),",
      "            std::path::Path::new(key_path.as_str()),",
      "        )",
      "        .await",
      "        .unwrap();",
      "",
      "        match axum_server::bind_rustls(addr, config)",
      "            .serve(app.into_make_service())",
      "            .await",
      "        {",
      "            Ok(e) => e,",
      "            _ => {",
      "                eprintln!(\"Failed to start the server\");",
      "                return;",
      "            }",
      "        };",
      "    }",
      "}",
      "",
      "async fn root(",
      "    State(state): State<AppState>,",
      "    Path(collection): Path<String>,",
      "    Query(params): Query<HashMap<String, String>>,",
      "    headers: header::HeaderMap,",
      ") -> String {",
      "    String::from(\"Welcome to BimaSoft API\")",
      "}",
      "",
      "async fn test(",
      "    State(state): State<AppState>,",
      "    Path(collection): Path<String>,",
      "    Query(params): Query<HashMap<String, String>>,",
      "    headers: header::HeaderMap,",
      "    Json(mut data): Json<Value>,",
      ") -> String {",
      "    String::from(\"Welcome to BimaSoft API\")",
      "}",
      ""
    ],
    "description": "Basic Axum handler setup"
  },
  "fnpost": {
    "prefix": "fnpost",
    "body": [
      "async fn ${1:fnname}(Json(payload): Json<Value>) -> (StatusCode, Json<Option<Value>>) {",
      "    println!(\"Raw Payload: {}\", payload);",
      "",
      "    let hello = payload",
      "        .get(\"hello\")",
      "        .and_then(Value::as_str)",
      "        .unwrap_or(\"world\");",
      "",
      "    (StatusCode::CREATED, Json(Some(payload)))",
      "}"
    ],
    "description": "Function with a post-increment operation"
  },
  "jsonstingify": {
    "prefix": "jsonstringify",
    "body": ["serde_json::to_string(&${1:s}).unwrap()"],
    "description": "Converts an object to a JSON string"
  },
  "jsonparse": {
    "prefix": "jsonparse",
    "body": ["let ${1:parsed}: Value = serde_json::from_str(${2:string})?"],
    "description": "Parses a JSON string"
  },
  "hashmap": {
    "prefix": "hashmap",
    "body": [
      "let mut ${1:map_name} = HashMap::new();",
      "${1:map_name}.insert(${2:key}, ${3:value});"
    ],
    "description": "Creates a new HashMap"
  },
  "tuple": {
    "prefix": "tuple",
    "body": ["let mut ${1:tuple_name} = (${2:elem1}, ${3:elem2});"],
    "description": "Creates a tuple with specified elements"
  },
  "vec": {
    "prefix": "vec",
    "body": ["let mut ${1:vec_name} = vec![${2:\"elem1\"}, ${3:\"elem2\"}];"],
    "description": "Creates a vector with specified elements"
  },
  "concat": {
    "prefix": "concat",
    "body": ["let mut {1:s} = format!(\"{}{}\", ${2:a}, ${3:b});"],
    "description": "Concatenates two strings"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:add}(${2:a: i32}) -> ${3:i32} {",
      "  return ${4:a+3}",
      "}"
    ],
    "description": "Function definition"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:i} in ${2:1..=6} {", "  ${3:statement}", "}"],
    "description": "For loop construct"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:condition} {", "  ${2:statement}", "}"],
    "description": "While loop construct"
  },
  "loop": {
    "prefix": "loop",
    "body": [
      "loop {",
      "  ${1:statement}",
      "  if ${2:condition} {",
      "    break;",
      "  }",
      "}"
    ],
    "description": "Loop construct"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "  ${2:pattern} => ${3:result},",
      "  _ => ${4:default_result}",
      "}"
    ],
    "description": "Match expression"
  },
  "pl": {
    "prefix": "pl",
    "body": ["println!(\"${1:Hello, world!}\");"],
    "description": "Prints a message to the console"
  },
  "main": {
    "prefix": "main",
    "body": ["fn main() {", "  println!(\"Hello, world!\");", "}"]
  }
}
