{
  "cs-modal": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-modal",
    "body": [
      "<cs-modal id=\"${1:modalID}\">",
      "  <h1>Modal Title</h1>",
      "  <p>Modal Content</p>",
      "</cs-modal>",
      "",
      "<script>",
      "  const modal = document.getElementById(\"${1:modalID}\");",
      "  modal.show();",
      "",
      "  modal.addEventListener(\"close\", () => {",
      "    console.log(\"Modal closed\");",
      "  });",
      "",
      "  modal.addEventListener(\"confirm\", () => {",
      "    console.log(\"Modal Confirm\");",
      "  });",
      "</script>",
      ""
    ]
  },
  "cs-infocard": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-infocard",
    "body": [
      "<cs-infocard",
      "  title=\"${1:Some Title}\"",
      "  value=\"${2:150}\"",
      "  unit=\"${3:People}\"",
      "  btn-title=\"${4:More Info}\"",
      "  background=\"${5:linear-gradient(to right, #00c6ff, #0072ff)}\"",
      ">",
      "  <div slot=\"icon\"><i-c icon=\"${6:user}\"></i-c></div>",
      "</cs-infocard>"
    ]
  },
  "cs-input": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-input",
    "body": [
      "<cs-input",
      "  id=\"${1:someID}\"",
      "  label=\"${2:SomeLabel}\"",
      "  type=\"${3|text,password,time,date|}\"",
      "  value=\"\"",
      "  onchange=\"someFunction()\"",
      "></cs-input>"
    ]
  },
  "cs-select": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-select",
    "body": [
      "<cs-select",
      "  id=\"${1:someid}\"",
      "  label=\"${2:Label}\"",
      "  value=\"\"",
      "  data=\"${3:Satu;Dua;Tiga}\"",
      "  onchange=\"someFunction()\"",
      "></cs-select>"
    ]
  },
  "typeWrap": {
    "scope": "javascript,javascriptreact,typescript",
    "prefix": "ty",
    "body": ["/** @type {${1:TypeName}} */ ", "($TM_SELECTED_TEXT)"]
  },
  "typeWrapPHP": {
    "scope": "php",
    "prefix": "ty",
    "body": [
      "/** @var ${1:TypeName}  $TM_SELECTED_TEXT */",
      "$TM_SELECTED_TEXT"
    ]
  },
  "type": {
    "scope": "javascript,javascriptreact",
    "prefix": ":",
    "body": ["/** @type {${1:TypeName}} */ "]
  },
  "list-icon": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "list-icon",
    "body": ["<list-icon></list-icon>"]
  },
  "cs-radio": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-radio",
    "body": [
      "<cs-radio",
      "  id=\"${1:someid}\"",
      "  label=\"${2:Label}\"",
      "  type=\"${3|radio,checkbox|}\"",
      "  value=\"\"",
      "  data=\"${4:Satu;Dua;Tiga}\"",
      "  dataValue=\"${5:1;2;3}\"",
      "  cols=\"${6:1}\"",
      "  onchange=\"someFunction()\"",
      "></cs-radio>"
    ]
  },
  "cs-upload": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-upload",
    "body": [
      "<cs-upload id=\"${1:someid}\" label=\"${2:Label}\" limit=${3:10}></cs-upload>"
    ]
  },
  "cs-rtf": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-rtf",
    "body": ["<cs-rtf id=\"${1:someid}\" label=\"${2:Label}\"></cs-rtf>"]
  },
  "cs-toast": {
    "scope": "html,php,javascriptreact,typescriptreact,svelte",
    "prefix": "cs-toast",
    "body": ["<cs-toast></cs-toast>"]
  },
  "toast": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "toast",
    "body": [
      "toast.${1|push,error,info,success,warn,loading,hide|}(\"${2:message}\",${3:durationms},\"${4|top-right,top-left,bottom-right,bottom-left|}\")"
    ]
  },
  "main": {
    "scope": "cpp",
    "prefix": "main",
    "body": [
      "#include <iostream>",
      "#include <bits/stdc++.h>",
      "#define int long long",
      "",
      "using namespace std;",
      "",
      "signed main() {",
      "\t$1",
      "\treturn 0;",
      "}"
    ]
  },
  "forcpp": {
    "scope": "cpp",
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {",
      "\t$3",
      "}"
    ]
  },
  "while": {
    "scope": "cpp",
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$2", "}"]
  },
  "dowhile": {
    "scope": "cpp",
    "prefix": "dowhile",
    "body": ["do {", "\t$1", "} while (${2:condition});"]
  },
  "move": {
    "scope": "sql",
    "prefix": "move",
    "body": [
      "ALTER TABLE `${1:table_name}` CHANGE `${2:columname}` `${2:columname}` ${3|VARCHAR,INT,TEXT,LONGTEXT|}(${4|5,10,100,255|}) DEFAULT ${5|\"\",NULL,0|} AFTER `${6:columnname}`;"
    ]
  },
  "ecosystempm2json": {
    "prefix": "ecosystempm2json",
    "scope": "json",
    "body": [
      "{",
      "  \"apps\": [",
      "    {",
      "      \"name\": \"cbtAdmin-svelte:3000\",",
      "      \"script\": \"npm run deploy\",",
      "      \"watch\": false,",
      "      \"instances\": 1,",
      "      \"env\": {",
      "        \"PORT\": 3000",
      "      }",
      "    }",
      "  ]",
      "}"
    ],
    "description": ""
  },
  "svelteAPI": {
    "scope": "javascript, typescript",
    "prefix": "svelteapi",
    "body": [
      "import { json } from \"@sveltejs/kit\";",
      "import type { RequestHandler } from \"./\\$types\";",
      "",
      "const headers = {",
      "  \"Access-Control-Allow-Origin\": \"*\",",
      "  \"Access-Control-Allow-Methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",",
      "  \"Access-Control-Allow-Headers\": \"Content-Type,authorization\",",
      "};",
      "",
      "export const OPTIONS: RequestHandler = () => {",
      "  return new Response(\"\", {",
      "    status: 200,",
      "    headers,",
      "  });",
      "};",
      "export const POST: RequestHandler = async ({ request, cookies }) => {",
      "  const { something } = await request.json();",
      "",
      "  return json({ something }, { status: 200, headers });",
      "};",
      "",
      "export const GET: RequestHandler = ({ url, params }) => {",
      "  const q = url.searchParams.get(\"q\");",
      "  // const slug = params.slug;",
      "  const number = Math.floor(Math.random() * 6) + 1;",
      "",
      "  return json({ number }, {status:200, headers});",
      "};",
      ""
    ]
  },
  "svelteeach": {
    "scope": "svelte",
    "prefix": "each",
    "body": ["{#each ${1:items} as ${2:item}}", "\t${3:item}", "{/each}"]
  },
  "svelteifelse": {
    "scope": "svelte",
    "prefix": "ifelse",
    "body": [
      "{#if ${1:true}}",
      "\t${2:dosomething}",
      "{:else}",
      "\t${3:somethingelse}",
      "{/if}"
    ]
  },
  "svelteif": {
    "scope": "svelte",
    "prefix": "if",
    "body": ["{#if ${1:true}}", "\t${2: //dosomething}", "{/if}"]
  },
  "svelte": {
    "scope": "svelte",
    "prefix": "svelte",
    "body": [
      "<script lang=\"ts\">",
      "\timport type { PageData, ActionData } from './\\$types';",
      "\texport let data: PageData;",
      "\texport let form: ActionData;",
      "</script>",
      "",
      "{#if form?.success}",
      "\t<p>Successfully logged in! Welcome back</p>",
      "{/if}"
    ]
  },
  "class": {
    "scope": "dart",
    "prefix": "class",
    "body": [
      "class Car {",
      "  String make;",
      "  String model;",
      "  int year;",
      "  Map<String, dynamic> data;",
      "",
      "  void honk() {",
      "    print('Beep beep!');",
      "  }",
      "",
      "  Future<void> fetchData() async {",
      "    var url = 'https://api.example.com/cars/$make/$model';",
      "    var response = await HttpClient().getUrl(Uri.parse(url));",
      "    var responseBody = await response.transform(utf8.decoder).join();",
      "    data = json.decode(responseBody);",
      "  }",
      "}",
      ""
    ],
    "description": "A class representing a car"
  },
  "md-table-multiline": {
    "scope": "markdown,pandoc",
    "prefix": "table-multiline",
    "body": [
      "<!-- prettier-ignore-start -->",
      "+--------+--------+",
      "| Header | Header |",
      "+========+========+",
      "| Isi    | Isi    |",
      "|        | Isi 2  |",
      "+--------+--------+",
      "<!-- prettier-ignore-end -->"
    ]
  },
  "md-table-noborder": {
    "scope": "markdown,pandoc",
    "prefix": "table-noborder",
    "body": [
      "::: {custom-style=\"tableStyle\"}",
      "noborder",
      ":::",
      "",
      "| ${3:Header} | ${4:Header} |",
      "| --- | --- |",
      "| ${5:Content} | ${6:Content} |",
      "",
      ": ${1:Caption} {#tbl:${2:tblref}}"
    ]
  },
  "md-table": {
    "scope": "markdown,pandoc",
    "prefix": "table",
    "body": [
      "| ${3:Header} | ${4:Header} |",
      "| --- | --- |",
      "| ${5:Content} | ${6:Content} |",
      "",
      ": ${1:Caption} {#tbl:${2:tblref}}"
    ]
  },
  "link": {
    "scope": "markdown,pandoc",
    "prefix": "link",
    "body": ["[${1:linkText}](${2:url})"]
  },
  "image-md": {
    "scope": "markdown,pandoc",
    "prefix": "image",
    "body": ["![${1:caption}](${2:url}){#fig:${3:figure0} width=${4:50%}}"]
  },
  "ref-md": {
    "scope": "markdown,pandoc",
    "prefix": "ref",
    "body": ["[@${1:fig}:${2:figure0}]"]
  },
  "code-cpp": {
    "scope": "markdown,pandoc",
    "prefix": "cpp",
    "body": ["```cpp", "${1:code}", "```"]
  },
  "code-python": {
    "scope": "markdown,pandoc",
    "prefix": "python",
    "body": ["```python", "${1:code}", "```"]
  },
  "text-italic": {
    "scope": "markdown,pandoc",
    "prefix": "text-italic",
    "body": ["[${1:content}]{custom-style=\"text-italic\"}"]
  },
  "text-underline": {
    "scope": "markdown,pandoc",
    "prefix": "text-underline",
    "body": ["[${1:content}]{custom-style=\"text-underline\"}"]
  },
  "text-primary": {
    "scope": "markdown,pandoc",
    "prefix": "text-primary",
    "body": ["[${1:content}]{custom-style=\"text-primary\"}"]
  },
  "text-danger": {
    "scope": "markdown,pandoc",
    "prefix": "text-danger",
    "body": ["[${1:content}]{custom-style=\"text-danger\"}"]
  },
  "code-md-block": {
    "scope": "markdown,pandoc",
    "prefix": "code-block",
    "body": ["```${1:php}", "", "", "", "```"]
  },
  "code": {
    "scope": "markdown,pandoc",
    "prefix": "code",
    "body": ["[${1:content}]{custom-style=\"code\"}"]
  },
  "text-success": {
    "scope": "markdown,pandoc",
    "prefix": "text-success",
    "body": ["[${1:content}]{custom-style=\"text-success\"}"]
  },
  "text-warning": {
    "scope": "markdown,pandoc",
    "prefix": "text-warning",
    "body": ["[${1:content}]{custom-style=\"text-warning\"}"]
  },
  "figure": {
    "scope": "markdown,pandoc",
    "prefix": "figure",
    "body": ["::: {custom-style=\"figure\"}", "${1:caption}", ":::"]
  },
  "single": {
    "scope": "markdown,pandoc",
    "prefix": "single",
    "body": ["::: {custom-style=\"single\"}", "${1:text}", ":::"]
  },
  "center": {
    "scope": "markdown,pandoc",
    "prefix": "center",
    "body": ["::: {custom-style=\"center\"}", "${1:caption}", ":::"]
  },
  "prettier-ignore": {
    "scope": "markdown,pandoc",
    "prefix": "ignore",
    "body": ["<!-- prettier-ignore -->"]
  },
  "prettier-ignore-range": {
    "scope": "markdown,pandoc",
    "prefix": "ignore-range",
    "body": [
      "<!-- prettier-ignore-start -->",
      "${1}",
      "<!-- prettier-ignore-end -->"
    ]
  },
  "md-fs8": {
    "scope": "markdown,pandoc",
    "prefix": "fs8",
    "body": ["[${1:content}]{custom-style=\"$fs8\"}"]
  },
  "md-fs6": {
    "scope": "markdown,pandoc",
    "prefix": "fs6",
    "body": ["[${1:content}]{custom-style=\"$fs6\"}"]
  },
  "span": {
    "scope": "markdown,pandoc",
    "prefix": "span",
    "body": ["[${1:content}]{custom-style=\"${2:style}\"}"]
  },
  "style": {
    "scope": "markdown,pandoc",
    "prefix": "style",
    "body": ["::: {custom-style=\"${1:Style Name}\"}", "${2:content}", ":::"]
  },
  "aligned": {
    "scope": "markdown,pandoc",
    "prefix": "aligned",
    "body": ["$$", "\\begin{aligned}", "  y &= x", "\\end{aligned}", "$$"]
  },
  "markdown:embed": {
    "prefix": "embed",
    "scope": "markdown,pandoc",
    "body": "[!embed](${1:url})"
  },
  "exportcsv": {
    "prefix": "exportcsv",
    "scope": "python,markdown",
    "body": ["df.to_csv('data.csv', index=False)"],
    "description": "importcsv"
  },
  "importcsv": {
    "prefix": "importcsv",
    "scope": "python,markdown",
    "body": [
      "import pandas as pd",
      "",
      "df = pd.read_csv('${1:somefile.csv}', encoding='ISO-8859-1', sep=\",\")",
      "df.head()"
    ],
    "description": "importcsv"
  },
  "df": {
    "prefix": "df",
    "description": "df",
    "scope": "python,markdown",
    "body": [
      "df = pd.DataFrame([",
      "  {\"first_name\" : \"Wasis\", \"last_name\" : \"Sasoko\"},",
      "])",
      "",
      "df = df._append({",
      "  \"first_name\" : \"Yoko\",",
      "  \"last_name\" : \"Wasis\"",
      "}, ignore_index=True)"
    ]
  },
  "impnumpy": {
    "prefix": "impnumpy",
    "description": "impnumpy",
    "scope": "python,markdown",
    "body": ["import numpy as np"]
  },
  "imppandas": {
    "prefix": "imppandas",
    "description": "imppandas",
    "scope": "python,markdown",
    "body": ["import pandas as pd"]
  },
  "environmentConda": {
    "prefix": "environmentConda",
    "scope": "yaml",
    "body": [
      "name: ${1:environmentName}",
      "channels:",
      "  - conda-forge",
      "dependencies:",
      "  - python=3.10",
      "  - jupyter",
      "  - pip",
      "  - pip:",
      "    - pynvim"
    ],
    "description": ""
  },
  "GithubPullSubModules": {
    "prefix": "GithubPullSubModules",
    "scope": "shellscript",
    "body": [
      "git submodule update --init --recursive",
      "git submodule update --recursive --remote",
      "cd src/react-form",
      "git checkout main",
      "git pull",
      "cd ../../",
      ""
    ],
    "description": ""
  },
  "GithubActionPingURL": {
    "prefix": "GithubActionPingURL",
    "scope": "github-actions-workflow,yml,yaml",
    "body": [
      "# name : .github/workflows/ping.yml",
      "name: Deploy to host2",
      "on:",
      "  push:",
      "    branches:",
      "      - \"main\"",
      "    paths-ignore:",
      "      - \"**/*.md\"",
      "      - \"**/*.mjs\"",
      "      - \"**/ping.yml\"",
      "jobs:",
      "  build:",
      "    runs-on: ubuntu-latest",
      "    steps:",
      "      - name: PING",
      "        run: curl https://deploy.host2.bimasoft.web.id/svelte-cbtadmin",
      ""
    ]
  },
  "GithubActionPagesNextJS": {
    "prefix": "GithubActionPagesNextJS",
    "scope": "github-actions-workflow,yml,yaml",
    "body": [
      "# name : .github/workflows/ping.yml",
      "name: Deploy to GitHub Pages",
      "on:",
      "  push:",
      "    branches:",
      "      - \"viteBranch\"",
      "    paths-ignore:",
      "      - \"**/*.md\"",
      "      - \"**/*.mjs\"",
      "      # - \"**/ping.yml\"",
      "permissions:",
      "  contents: read",
      "  pages: write",
      "  id-token: write",
      "concurrency:",
      "  group: \"pages\"",
      "  cancel-in-progress: false",
      "jobs:",
      "  build:",
      "    runs-on: ubuntu-latest",
      "    steps:",
      "      - name: Checkout Repository",
      "        uses: actions/checkout@v4",
      "        with:",
      "          submodules: recursive",
      "      - uses: pnpm/action-setup@v2",
      "        with:",
      "          version: 8",
      "      - name: Detect package manager",
      "        id: detect-package-manager",
      "        run: |",
      "          if [ -f \"${{ github.workspace }}/yarn.lock\" ]; then",
      "            echo \"manager=yarn\" >> \\$GITHUB_OUTPUT",
      "            echo \"command=install\" >> \\$GITHUB_OUTPUT",
      "            echo \"runner=yarn\" >> \\$GITHUB_OUTPUT",
      "            exit 0",
      "          elif [ -f \"${{ github.workspace }}/pnpm-lock.yaml\" ]; then",
      "            echo \"manager=pnpm\" >> \\$GITHUB_OUTPUT",
      "            echo \"command=install\" >> \\$GITHUB_OUTPUT",
      "            echo \"runner=pnpm\" >> \\$GITHUB_OUTPUT",
      "            exit 0",
      "          elif [ -f \"${{ github.workspace }}/package.json\" ]; then",
      "            echo \"manager=npm\" >> \\$GITHUB_OUTPUT",
      "            echo \"command=ci\" >> \\$GITHUB_OUTPUT",
      "            echo \"runner=npx --no-install\" >> \\$GITHUB_OUTPUT",
      "            exit 0",
      "          else",
      "            echo \"Unable to determine package manager\"",
      "            exit 1",
      "          fi",
      "      - name: Setup Node",
      "        uses: actions/setup-node@v4",
      "        with:",
      "          node-version: \"20\"",
      "          cache: ${{ steps.detect-package-manager.outputs.manager }}",
      "      - name: Install dependencies",
      "        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}",
      "      - name: Build project",
      "        run: ${{ steps.detect-package-manager.outputs.runner }} run build",
      "      - name: Upload artifact",
      "        uses: actions/upload-pages-artifact@v2",
      "        with:",
      "          path: ./dist",
      "  # Deployment job",
      "  deploy:",
      "    environment:",
      "      name: github-pages",
      "      url: ${{ steps.deployment.outputs.page_url }}",
      "    runs-on: ubuntu-latest",
      "    needs: build",
      "    steps:",
      "      - name: Deploy to GitHub Pages",
      "        id: deployment",
      "        uses: actions/deploy-pages@v3"
    ]
  },
  "Bold text": {
    "prefix": "bold",
    "scope": "latex",
    "body": ["\\textbf{${1:$TM_SELECTED_TEXT}}"],
    "description": "Make text bold"
  },
  "Bold text BF": {
    "prefix": "bf",
    "scope": "latex",
    "body": ["\\textbf{${1:$TM_SELECTED_TEXT}}"],
    "description": "Make text bold"
  },
  "Underline": {
    "prefix": "under",
    "scope": "latex",
    "body": ["\\underline{${1:$TM_SELECTED_TEXT}}"]
  },
  "Italic": {
    "prefix": "it",
    "scope": "latex",
    "body": ["\\textit{${1:$TM_SELECTED_TEXT}}"]
  },
  "Latex Numbering": {
    "prefix": "numbering",
    "scope": "latex",
    "body": ["\\begin{enumerate}", "  \\item ${1:item}", "\\end{enumerate}"],
    "description": "Latex Numbering"
  },
  "Latex Bullets": {
    "prefix": "bullets",
    "scope": "latex",
    "body": ["\\begin{itemize}", "  \\item ${1:item}", "\\end{itemize}"],
    "description": "Latex Bullets"
  },
  "Latex Bullets Table": {
    "prefix": "bulletstable",
    "scope": "latex",
    "body": [
      "\\begin{itemize}[topsep=0pt,partopsep=0pt,parsep=0pt,itemsep=0pt,before=\\vspace{-\baselineskip},after=\\vspace{-\baselineskip}]",
      "  \\item ${1:item}",
      "\\end{itemize}"
    ],
    "description": "Latex Bullets With No Margina and Padding. Usually at the start of the table cell"
  },
  "Align Right": {
    "prefix": "alignright",
    "scope": "latex",
    "body": ["\\begin{flushright}", "  ${1:item}", "\\end{flushright}"],
    "description": "Align Right"
  },
  "Subsection": {
    "prefix": "subsection",
    "scope": "latex",
    "body": ["\\subsection{${1:Subsection}}"],
    "description": "Latex Subsection"
  },
  "SubSubsection": {
    "prefix": "subsubsection",
    "scope": "latex",
    "body": ["\\subsubsection{${1:SubSubsection}}"],
    "description": "Latex SubSubsection"
  },
  "Section": {
    "prefix": "section",
    "scope": "latex",
    "body": ["\\section{${1:Section}}"],
    "description": "Latex Section"
  },
  "image": {
    "prefix": "image",
    "scope": "latex",
    "body": [
      "\\begin{figure}[h]",
      "  \\centering",
      "  \\includegraphics[width=0.5\\textwidth]{${1:filename}}",
      "  \\caption{${2:Caption for the image}}",
      "  \\label{fig:${3:label}}",
      "\\end{figure}"
    ]
  },
  "tablelong": {
    "prefix": "tablelong",
    "scope": "latex",
    "body": [
      "\\begin{longtable}{",
      "  >{\\raggedright\\arraybackslash}p{3cm}",
      "  >{\\raggedright\\arraybackslash}p{3cm}",
      "  }",
      "  \\captionsetup{justification=centering}",
      "  \\caption{Caption Tabel} \\\\\\",
      "  \\hline",
      "  Head1 & Head2 \\\\\\ \\hline",
      "  \\endfirsthead",
      "  \\multicolumn{2}{c}%",
      "  {Tabel \\thetable\\ -- \\textit{Sambungan halaman sebelumnya}} \\\\\\ ",
      "  \\hline \\\\\\",
      "  Head1 & Head2 \\\\\\ \\hline \\endhead",
      "  \\hline \\multicolumn{2}{r}{\\textit{Bersambung di halaman selanjutnya}} \\\\\\",
      "  \\endfoot",
      "  \\hline",
      "  \\endlastfoot",
      "  Kolomn 1 & Kolom 2 \\\\\\ \\hline",
      "  Kolomn 1 & Kolom 2 \\\\\\ \\hline",
      "  \\label{tab:label}",
      "\\end{longtable}      "
    ]
  },
  "landscape": {
    "prefix": "landscape",
    "scope": "latex",
    "body": [
      "\\newpage",
      "\\KOMAoptions{paper=landscape,DIV=9,pagesize}",
      "\\recalctypearea"
    ]
  },
  "potrait": {
    "prefix": "potrait",
    "scope": "latex",
    "body": [
      "\\newpage",
      "\\KOMAoptions{paper=portrait,pagesize}",
      "\\recalctypearea"
    ]
  }
}
