{
  "reactServerSideProps": {
    "prefix": "reactServerSideProps",
    "body": [
      "export const getServerSideProps = async () => {",
      "  const res = await fetch('https://jsonplaceholder.typicode.com/posts/2');",
      "  const post: Post = await res.json();",
      "",
      "  return {",
      "    props: { post },",
      "  };",
      "};",
      "",
      "type ServerProps = {",
      "  post: Post;",
      "};",
      "",
      "const ${1:ServerPage}: React.FC<ServerProps> = ({ post }) => (",
      "  <div>",
      "    <h1>{post.title}</h1>",
      "    <p>{post.body}</p>",
      "  </div>",
      ");",
      "",
      "export default ${1:ServerPage};"
    ]
  },
  "reactStaticProps": {
    "prefix": "reactStaticProps",
    "body": [
      "type Post = {",
      "  id: number;",
      "  title: string;",
      "  body: string;",
      "};",
      "",
      "export const getStaticProps = async () => {",
      "  const res = await fetch('https://jsonplaceholder.typicode.com/posts/1');",
      "  const post: Post = await res.json();",
      "",
      "  return {",
      "    props: { post },",
      "  };",
      "};",
      "",
      "type StaticProps = {",
      "  post: Post;",
      "};",
      "",
      "const ${1:StaticPage}: React.FC<StaticProps> = ({ post }) => (",
      "  <div>",
      "    <h1>{post.title}</h1>",
      "    <p>{post.body}</p>",
      "  </div>",
      ");",
      "",
      "export default ${1:StaticPage};"
    ]
  },
  "router": {
    "prefix": "router",
    "body": [
      "//main.tsx",
      "import { createRoot } from \"react-dom/client\";",
      "import App from \"./App.tsx\";",
      "import { HashRouter, Route, Router, Routes } from \"react-router\";",
      "",
      "createRoot(document.getElementById(\"root\")!).render(",
      "  <HashRouter>",
      "    <Routes>",
      "      <Route path=\"/\" element={<App />} />",
      "    </Routes>",
      "  </HashRouter>,",
      ");",
      ""
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "${1:array}.map((${2:object}, index) => {",
      "\treturn <>{${2:object}}</>",
      "})"
    ]
  }
}
