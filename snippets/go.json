{
  "join": {
    "prefix": "join",
    "body": ["strings.Join(${1:array}, ${2:delimiter})"],
    "description": "Join an array of strings with a delimiter"
  },
  "split": {
    "prefix": "split",
    "body": ["strings.Split(${1:string}, ${2:delimiter})"],
    "description": "Split a string by a delimiter"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch ${1:variable} {",
      "case ${2:value1}:",
      "  ${3:// code for value1}",
      "default:",
      "  ${4:// default code}",
      "}"
    ],
    "description": "Switch statement with multiple cases"
  },
  "jsonbodyfiber": {
    "prefix": "jsonbodyfiber",
    "body": [
      "var data map[string]any",
      "if err := c.Bind().JSON(&data); err != nil {",
      "  return c.Status(400).SendString(\"Invalid JSON\" + err.Error())",
      "}",
      "urlParams := c.Params(\"${1:paramName}\")",
      "queryParams1 := c.Query(\"${2:queryParam1}\", \"${3:defaultValue}\")"
    ],
    "description": "Parse JSON body in a Fiber route handler"
  },
  "typeof": {
    "prefix": "typeof",
    "body": ["fmt.Sprintf(\"%T\", ${1:variable})"],
    "description": "Print the type of a variable"
  },
  "now": {
    "prefix": "now",
    "body": ["time.Now().Format(\"2006-01-02 15:04:05\")"],
    "description": "Print the current date and time"
  },
  "parsefloat": {
    "prefix": "parsefloat",
    "body": ["n,_ := strconv.ParseFloat(${1:str}, 64)"],
    "description": "Parse a string into a float"
  },
  "parseint": {
    "prefix": "parseint",
    "body": ["n,_ := strconv.Atoi(${1:str})"],
    "description": "Parse a string into an integer"
  },
  "inttostr": {
    "prefix": "inttostr",
    "body": ["s,_ := strconv.Itoa(${1:intVar})"],
    "description": "Convert an integer to a string"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:i} := ${2:0}; ${1:i} < ${3:10}; ${1:i}++ {",
      "  ${4:// code}",
      "}"
    ],
    "description": "For loop with initialization, condition, and post statement"
  },
  "forof": {
    "prefix": "forof",
    "body": ["for k, v := range ${1:obj} {", "  ${2:// code}", "}"],
    "description": "For loop over a collection"
  },
  "jsonparsedynamic": {
    "prefix": "jsonparsedynamic",
    "body": [
      "jsonString := []byte(`{\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"],\"Siblings\":{\"Brother\":\"Pugsley\",\"Sister\":\"Pubert\"}}`)",
      "var tempInterfaceVar any",
      "err := json.Unmarshal(jsonString, &tempInterfaceVar)",
      "if err != nil {",
      "  log.Fatalf(\"Error JSON.parse: %v\", err)",
      "}",
      "varName := tempInterfaceVar.(map[string]any)",
      "",
      "fmt.Println(varName[\"Parents\"].([]any)[0].(string))",
      "fmt.Println(varName[\"Siblings\"].(map[string]any)[\"Brother\"].(string))"
    ],
    "description": "Unmarshal JSON data into an interface"
  },
  "jsonstringify": {
    "prefix": "jsonstringify",
    "body": [
      "${1:json}, err := json.Marshal(${2:structobject})",
      "if err != nil {",
      "  log.Fatalf(\"Error JSON.stringfy: %v\", err)",
      "}",
      "",
      "fmt.Println(string(${1:json}))"
    ],
    "description": "Marshal a struct into JSON data"
  },
  "jsonparse": {
    "prefix": "jsonparse",
    "body": [
      "type TypeOf${1:v} struct {",
      "  Hello string `json:\"hello\"`",
      "}",
      "var ${1:v} TypeOf${1:v}",
      "err := json.Unmarshal([]byte(`{\"hello\": \"world\"}`), &${1:v})",
      "if err != nil {",
      "  log.Fatalf(\"Error JSON.parse: %v\", err)",
      "}"
    ],
    "description": "Unmarshal JSON data into a struct"
  },
  "println": {
    "prefix": "pl",
    "body": ["fmt.Println(${1:message})"],
    "description": "Print a message to the console"
  },
  "typecheck": {
    "prefix": "typecheck",
    "body": ["typeOf${1:variable} := fmt.Sprintf(\"%T\", ${1:variable})"],
    "description": "Check if a variable is of a specific type"
  },
  "typemap": {
    "prefix": "typemap",
    "body": ["var ${1:varName} map[${2:string}]${3:int}"],
    "description": "Create a new map type"
  },
  "typearr": {
    "prefix": "typearr",
    "body": ["var ${1:varName} [${3:100}]${2:string}"],
    "description": "Create a new array type"
  },
  "typestruct": {
    "prefix": "typestruct",
    "body": [
      "type ResultPayload struct {",
      "  Page    int",
      "  PerPage int",
      "  Items   map[string]string",
      "  Arr     []string",
      "}",
      "",
      "result := ResultPayload{",
      "  1,",
      "  10,",
      "  map[string]string{",
      "    \"item1\": \"value1\",",
      "    \"item2\": \"value2\",",
      "    \"item3\": \"value3\",",
      "  },",
      "  []string{\"item1\", \"item2\", \"item3\"},",
      "}"
    ],
    "description": "Create a new struct"
  },
  "hello": {
    "prefix": "hello",
    "body": ["fmt.Println(\"Hello, World!\")"]
  }
}
