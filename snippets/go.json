{
  "parsefloat": {
    "prefix": "parsefloat",
    "body": ["n,_ := strconv.ParseFloat(${1:str}, 64)"],
    "description": "Parse a string into a float"
  },
  "parseint": {
    "prefix": "parseint",
    "body": ["n,_ := strconv.Atoi(${1:str})"],
    "description": "Parse a string into an integer"
  },
  "inttostr": {
    "prefix": "inttostr",
    "body": ["s,_ := strconv.Itoa(${1:intVar})"],
    "description": "Convert an integer to a string"
  },
  "forof": {
    "prefix": "forof",
    "body": [
      "for key, value := range ${1:structobject} {",
      "  ${3:// code}",
      "}"
    ],
    "description": "For loop over a collection"
  },
  "unmarshalinterface": {
    "prefix": "unmarshalinterface",
    "body": [
      "jsonString := []byte(`{\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"],\"Siblings\":{\"Brother\":\"Pugsley\",\"Sister\":\"Pubert\"}}`)",
      "var tempInterfaceVar any",
      "json.Unmarshal(jsonString, &tempInterfaceVar)",
      "varName := tempInterfaceVar.(map[string]any)",
      "",
      "fmt.Println(varName[\"Parents\"].([]any)[0].(string))",
      "fmt.Println(varName[\"Siblings\"].(map[string]any)[\"Brother\"].(string))"
    ],
    "description": "Unmarshal JSON data into an interface"
  },
  "marshal": {
    "prefix": "marshal",
    "body": [
      "type TypeOfV struct {",
      "  Hello string",
      "}",
      "",
      "var v TypeOfV",
      "v = TypeOfV{Hello: \"World\"}",
      "",
      "jsonStr, err := json.Marshal(v)",
      "if err != nil {",
      "  log.Fatalf(\"Error marshalling JSON: %v\", err)",
      "}",
      "",
      "fmt.Println(string(jsonStr))"
    ],
    "description": "Marshal a struct into JSON data"
  },
  "unmarshal": {
    "prefix": "unmarshal",
    "body": [
      "type ${1:TypeOfV} struct {",
      "  Hello string `json:\"hello\"`",
      "}",
      "var ${2:v} ${1:TypeOfV}",
      "json.Unmarshal([]byte(`{\"hello\": \"world\"}`), &${2:v})"
    ],
    "description": "Unmarshal JSON data into a struct"
  },
  "println": {
    "prefix": "pl",
    "body": ["fmt.Println(${1:message})"],
    "description": "Print a message to the console"
  },
  "typecheck": {
    "prefix": "typecheck",
    "body": ["typeOf${1:variable} := fmt.Sprintf(\"%T\", ${1:variable})"],
    "description": "Check if a variable is of a specific type"
  },
  "typemap": {
    "prefix": "typemap",
    "body": ["var ${1:varName} map[${2:string}]${3:int}"],
    "description": "Create a new map type"
  },
  "typearr": {
    "prefix": "typearr",
    "body": ["var ${1:varName} [${3:100}]${2:string}"],
    "description": "Create a new array type"
  },
  "typestruct": {
    "prefix": "typestruct",
    "body": [
      "type ResultPayload struct {",
      "  Page    int",
      "  PerPage int",
      "  Items   map[string]string",
      "  Arr     []string",
      "}",
      "",
      "result := ResultPayload{",
      "  1,",
      "  10,",
      "  map[string]string{",
      "    \"item1\": \"value1\",",
      "    \"item2\": \"value2\",",
      "    \"item3\": \"value3\",",
      "  },",
      "  []string{\"item1\", \"item2\", \"item3\"},",
      "}"
    ],
    "description": "Create a new struct"
  },
  "hello": {
    "prefix": "hello",
    "body": ["fmt.Println(\"Hello, World!\")"]
  }
}
